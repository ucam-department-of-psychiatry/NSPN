install.packages('nlme')
install.packages('phia')
df <- read.csv(file = '/home/richard/Downloads/Health.csv', header = T)
install.packages("MatchIt")
library(MatchIt)
zz <- matchit(~ age + sex + cattell, data=df, method="nearest",
distance="mahalanobis", replace=TRUE)
zz <- matchit(1 ~ age + sex + cattell, data=df, method="nearest",
distance="mahalanobis", replace=TRUE)
View(df)
df2 <- select(df,c("subjid","cattell","age","sex")
df2 <- select(df,c("subjid","cattell","age","sex"))
require(data.table)
require(bit64)
require(dplyr)
df2 <- select(df,c("subjid","cattell","age","sex"))
zz <- matchit( ~ age + sex + cattell, data=df2, method="nearest",
distance="mahalanobis", replace=TRUE)
zz <- matchit(1 ~ age + sex + cattell, data=df2, method="nearest",
distance="mahalanobis", replace=TRUE)
View(df2)
df2 <- df2[complete.cases(df2), ]
zz <- matchit(~ age + sex + cattell, data=df2, method="nearest",
distance="mahalanobis", replace=TRUE)
zz <- matchit(1 ~ age + sex + cattell, data=df2, method="nearest",
distance="mahalanobis", replace=TRUE)
zz <- matchit(age + sex + cattell, data=df2, method="nearest",
distance="mahalanobis", replace=TRUE)
require(caret)
# 20% for validation
data.validate <- dataset[-split_id,]
split_id <- createDataPartition(df2, p=0.80, list=FALSE)
require(caret)
install.packages("caret")
install.packages("caret")
View(df2)
df <- read.csv(file = '/home/richard/Downloads/Health.csv', header = T)
df2 <- select(df,c("CC_CODE","cattell","age","sex"))
require(data.table)
require(bit64)
require(dplyr)
require(MatchIt)
require(caret)
df <- read.csv(file = '/home/richard/Downloads/Health.csv', header = T)
df2 <- select(df,c("CC_CODE","cattell","age","sex"))
View(df2)
View(df)
require(tidyverse)
df3 <- df2[!duplicated(df2$CC_CODE), ]
View(df3)
df2 <- df2[!duplicated(df2$CC_CODE), ]
df2 <- df2[complete.cases(df2), ]
split_id <- createDataPartition(df2, p=0.80, list=FALSE)
split_id <- createDataPartition(df2$CC_CODE, p=0.80, list=FALSE)
# 20% for validation
data.validate <- df2[-split_id,]
# 80% for training
data.train <- df2[split_id,]
split_id <- createDataPartition(df2$age, p=0.80, list=FALSE)
# 20% for validation
data.validate <- df2[-split_id,]
# 80% for training
data.train <- df2[split_id,]
View(data.train)
split_id <- createDataPartition(c(df2$age, df2$cattell), p=0.80, list=FALSE)
# 20% for validation
data.validate <- df2[-split_id,]
# 80% for training
data.train <- df2[split_id,]
split_id <- createDataPartition(c(df2$age), p=0.80, list=FALSE)
# 20% for validation
data.validate <- df2[-split_id,]
# 80% for training
data.train <- df2[split_id,]
t.test(data.validate$age, data.train$age)
test <- t.test(data.validate$age, data.train$age)
test$p.value
t.test(data.validate$age, data.train$age)$p.value>0.05
t.test(data.validate$cattell, data.train$cattell)$p.value>0.05
getwd()
setwd("~/Desktop")
write.table(data.train$CC_CODE, file = 'Main.txt', row.names = FALSE, col.names = FALSE, sep = " ", quote = FALSE)
write.table(data.validate$CC_CODE, file = 'Holdout.txt', row.names = FALSE, col.names = FALSE, sep = " ", quote = FALSE)
t.test(data.validate$cattell, data.train$cattell)
chisq.test(data.train$sex, data.validate$sex)
setwd("~/Dropbox/Research/Projects/NSPN")
## read in the participants file generated through dcm2bids conversion
df_orig <- read.table('participants.tsv', header = TRUE)
df_orig$participant_id <- as.character(df_orig$participant_id)
## read in the file from RedCap and amend subject ID to conform to BIDS
df_redc <- read.delim('./Data/participants.tsv', header = TRUE, sep = "\t")
df_redc$participant_id_redcap <- df_redc$participant_id
df_redc$participant_id <- paste('sub-',df_redc$participant_id,sep = "")
## compare files and check missing
library(lava)
matchedSubs <- df_redc[df_redc$participant_id %in% df_orig$participant_id,]
missingSubs <- df_redc[df_redc$participant_id %ni% df_orig$participant_id,]
## add QC info from manual QC to the subjects files
df_qc <- read.csv('./Code/sublist_UCHANGE_QCpassed_20161007', header = TRUE)
df_qc$participant_id <- paste('sub-',df_qc$nspn_id,sep="")
# set the baseline QC variable to default 0 and convert QC-ed subjects to 1
matchedSubs$baselineQC <- 0
matchedSubs$baselineQC[matchedSubs$participant_id %in% df_qc$participant_id] <- 1
write.table(matchedSubs,file = 'participants.tsv',row.names = FALSE,quote = FALSE, sep = "\t")
